// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserGroup {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     UserGroupMember[]

  @@map("user_groups")
}

model UserGroupMember {
  id          String    @id @default(cuid())
  userId      String
  userGroupId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroup UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, userGroupId])
  @@map("user_group_members")
}

model User {
  id              String           @id @default(cuid())
  userName        String           @unique
  fullName        String
  email           String           @unique
  role            String           @default("user")
  countryCode     String?   @default("CO")
  phone           String?   @default("") // Número local
  fullPhone       String?   @default("") // Número internacional sin el signo +
  address         String?
  birthDate       DateTime?
  dni             String           @unique
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isEmailVerified Boolean          @default(false)
  whatsappEnabled Boolean          @default(false)
  password        String           
  propertyOwners  PropertyOwner[]
  userGroupMembers UserGroupMember[]
  Vehicle        Vehicle[]

  @@map("users")
}

model Apartment {
  id             Int              @id @default(autoincrement())
  apartment      String           @db.VarChar(10)
  house          String           @db.VarChar(50)
  fullAddress    String           @db.VarChar(150)
  block          String           @db.VarChar(10)
  floor          String           @db.VarChar(10)
  tower          String           @db.VarChar(10)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  propertyOwners PropertyOwner[]

  @@map("apartments")
}

model PropertyOwner {
  id          String    @id @default(cuid())
  userId      String
  apartmentId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@unique([userId, apartmentId])
  @@map("property_owners")
}


enum SettingCategory {
  WHATSAPP
}

model Setting {
  id           String          @id @default(cuid())
  category     SettingCategory
  jsonSettings String
  count        Int             @default(0) // Contador de mensajes restantes
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("settings")
}



model Vehicle {
  code      String   @id
  userId    String
  brand     String
  color     String
  model     String
  vehicleType VehiculeType @default(CARRO)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  @@map("vehicles")
}

model WhatsappMessage {
  id               Int      @id @default(autoincrement())
  messageId        String   @unique                 // ID único del mensaje (wamid)
  waId             String                            // ID del usuario de WhatsApp
  contactName      String?                           // Nombre del contacto (opcional)
  phoneNumberId    String                            // ID del número de negocio
  direction        Direction                         // 'inbound' | 'outbound'
  messageType      MessageType                       // 'text', 'image', etc.
  content          String?                           // Texto o descripción del contenido
  rawPayload       Json                              // Payload completo del webhook
  status           MessageStatus @default(sent)      // Estado del mensaje
  conversationId   String?                           // ID lógico de conversación
  flowTrigger      String?                           // Flujo MCP activado (si aplica)
  receivedAt       DateTime                          // Fecha de recepción
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([waId])
  @@index([conversationId])
  @@index([flowTrigger])
  @@index([receivedAt])
}

enum VehiculeType {
  CARRO
  MOTO
  CAMIONETA
  MOTOCARRO
  FURGON 
  CAMION
}

enum Direction {
  inbound
  outbound
}

enum MessageType {
  text
  image
  audio
  video
  document
  button
  location
  sticker
}

enum MessageStatus {
  sent
  delivered
  read
  failed
}


