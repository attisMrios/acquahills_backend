generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserGroup {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     UserGroupMember[]

  @@map("user_groups")
}

model UserGroupMember {
  id          String   @id @default(cuid())
  userId      String
  userGroupId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroup UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, userGroupId])
  @@map("user_group_members")
}

model User {
  id               String            @id @default(cuid())
  userName         String            @unique
  fullName         String
  email            String            @unique
  role             String            @default("user")
  countryCode      String?           @default("CO")
  phone            String?           @default("") // Número local
  fullPhone        String?           @default("") // Número internacional sin el signo +
  address          String?
  birthDate        DateTime?
  dni              String            @unique
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isEmailVerified  Boolean           @default(false)
  password         String
  whatsappEnabled  Boolean           @default(false)
  fcmSubscriptions FCMSubscription[]
  propertyOwners   PropertyOwner[]
  userGroupMembers UserGroupMember[]
  Vehicle        Vehicle[]
  incidents      Incident[]

  @@map("users")
}

model Apartment {
  id             Int             @id @default(autoincrement())
  apartment      String          @db.VarChar(10)
  house          String          @db.VarChar(50)
  fullAddress    String          @db.VarChar(150)
  block          String          @db.VarChar(10)
  floor          String          @db.VarChar(10)
  tower          String          @db.VarChar(10)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  propertyOwners PropertyOwner[]

  @@map("apartments")
}

model PropertyOwner {
  id          String   @id @default(cuid())
  userId      String
  apartmentId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@unique([userId, apartmentId])
  @@map("property_owners")
}



model Setting {
  id           String          @id @default(cuid())
  category     SettingCategory
  jsonSettings String
  count        Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("settings")
}

model FCMSubscription {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  token     String
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topic, token])
  @@index([topic])
  @@index([userId])
  @@map("fcm_subscriptions")
}

model Vehicle {
  code        String      @id
  userId      String
  brand       String
  color       String
  model       String
  vehicleType VehicleType @default(CARRO)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("vehicles")
}

model WhatsappMessage {
  id             Int           @id @default(autoincrement())
  messageId      String        @unique
  waId           String
  contactName    String?
  phoneNumberId  String
  direction      Direction
  messageType    MessageType
  content        String?
  rawPayload     Json
  status         MessageStatus @default(sent)
  conversationId String?
  flowTrigger    String?
  receivedAt     DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  media          String?

  @@index([waId])
  @@index([conversationId])
  @@index([flowTrigger])
  @@index([receivedAt])
  @@map("whatsapp_messages")
}


model CommonArea {
  id                   Int                        @id @default(autoincrement())
  name                 String
  description          String?
  maximunCapacity      Int
  peoplePerReservation Int
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  unavailableDays      CommonAreaUnavailableDay[]
  timeSlots            CommonAreaTimeSlot[]
  typeCommonAreaId     Int
  typeCommonArea       TypeCommonArea             @relation(fields: [typeCommonAreaId], references: [id], onDelete: Restrict)

  @@map("common_areas")
}

model CommonAreaUnavailableDay {
  id                Int        @id @default(autoincrement())
  commonAreaId      Int
  weekDay           WeekDay? // Día específico de la semana (nullable si es por regla especial)
  isFirstWorkingDay Boolean    @default(false) // Si bloquea el primer día hábil de la semana
  commonArea        CommonArea @relation(fields: [commonAreaId], references: [id], onDelete: Restrict)
}

model CommonAreaTimeSlot {
  id           Int        @id @default(autoincrement())
  commonAreaId Int
  startTime    String // Ejemplo: "08:00"
  endTime      String // Ejemplo: "10:00"
  commonArea   CommonArea @relation(fields: [commonAreaId], references: [id], onDelete: Restrict)
}

model TypeCommonArea {
  id          Int          @id @default(autoincrement())
  name        String       @unique // Agregado unique para evitar duplicados
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  commonAreas CommonArea[]

  @@map("type_common_areas")
}

// Modelo de incidentes simplificado
model Incident {
  id          String          @id @default(cuid())
  type        IncidentType
  title       String          // Título del incidente
  description String          // Descripción detallada
  status      IncidentStatus  @default(PENDING)
  priority    IncidentPriority @default(MEDIUM)
  reportedBy  String          // ID del usuario que reporta
  
  // Datos específicos del incidente (JSON flexible)
  incidentData Json?          // Datos específicos según el tipo
  
  // Metadatos
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relaciones
  user        User            @relation(fields: [reportedBy], references: [id], onDelete: Cascade)
  
  @@map("incidents")
}



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/////     ENUMERACIONES //////////


enum VehicleType {
  CARRO
  MOTO
  CAMIONETA
  MOTOCARRO
  FURGON
  CAMION
}

enum Direction {
  inbound
  outbound
}

enum MessageType {
  text
  image
  audio
  video
  document
  button
  location
  sticker
}

enum MessageStatus {
  sent
  delivered
  read
  failed
}

// Enums para incidentes
enum IncidentType {
  VEHICLE
  PET
  COEXISTENCE
  DAMAGE
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum IncidentPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SettingCategory {
  WHATSAPP
}



