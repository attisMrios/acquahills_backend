// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserGroup {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     UserGroupMember[]

  @@map("user_groups")
}

model UserGroupMember {
  id          String    @id @default(cuid())
  userId      String
  userGroupId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroup UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, userGroupId])
  @@map("user_group_members")
}

model User {
  id              String           @id @default(cuid())
  userName        String           @unique
  fullName        String
  email           String           @unique
  role            String           @default("user")
  phone           String?
  address         String?
  birthDate       DateTime?
  dni             String           @unique
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isEmailVerified Boolean          @default(false)
  password        String           // Hashed password
  propertyOwners  PropertyOwner[]
  userGroupMembers UserGroupMember[]

  @@map("users")
}

model Apartment {
  id             Int              @id @default(autoincrement())
  apartment      String           @db.VarChar(10)
  house          String           @db.VarChar(50)
  fullAddress    String           @db.VarChar(150)
  block          String           @db.VarChar(10)
  floor          String           @db.VarChar(10)
  tower          String           @db.VarChar(10)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  propertyOwners PropertyOwner[]

  @@map("apartments")
}

model PropertyOwner {
  id          String    @id @default(cuid())
  userId      String
  apartmentId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@unique([userId, apartmentId])
  @@map("property_owners")
}


