import { Controller, Get, Query, Request, Res } from '@nestjs/common';
import { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';
import { Response } from 'express';
import { SSEService } from '../../common/services/sse.service';
import { WhatsAppEventEmitterService } from '../../common/services/whatsapp-event-emitter.service';

@ApiTags('WhatsApp SSE')
@Controller('whatsapp-sse')
export class WhatsAppSSEController {
  constructor(
    private readonly sseService: SSEService,
    private readonly eventEmitter: WhatsAppEventEmitterService
  ) {}

  @Get('connect')
  @ApiOperation({ 
    summary: 'Conectar administrador a SSE para mensajes de WhatsApp en tiempo real',
    description: 'Establece una conexi√≥n Server-Sent Events para recibir mensajes de WhatsApp en tiempo real. Solo para administradores.'
  })
  @ApiQuery({ 
    name: 'adminId', 
    required: true, 
    description: 'ID √∫nico del administrador' 
  })
  @ApiQuery({ 
    name: 'adminEmail', 
    required: true, 
    description: 'Email del administrador' 
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Conexi√≥n SSE establecida exitosamente' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'Par√°metros faltantes o inv√°lidos' 
  })
  async connectToSSE(
    @Query('adminId') adminId: string,
    @Query('adminEmail') adminEmail: string,
    @Res() res: Response,
    @Request() req: any
  ) {
    try {
      // Validar par√°metros
      if (!adminId || !adminEmail) {
        return res.status(400).json({
          success: false,
          message: 'adminId y adminEmail son requeridos'
        });
      }

      // Validar formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(adminEmail)) {
        return res.status(400).json({
          success: false,
          message: 'Formato de email inv√°lido'
        });
      }

      console.log(`üîó Intentando conectar admin ${adminEmail} (${adminId}) a SSE`);

      // Verificar si ya est√° conectado
      if (this.sseService.isAdminConnected(adminId)) {
        console.log(`‚ö†Ô∏è Admin ${adminEmail} ya est√° conectado, cerrando conexi√≥n anterior`);
        // La conexi√≥n anterior se cerrar√° autom√°ticamente
      }

      // Emitir evento de conexi√≥n
      this.eventEmitter.emitAdminConnected(adminId, adminEmail);

      // Registrar conexi√≥n SSE
      this.sseService.registerAdminConnection(adminId, adminEmail, res);

      // La respuesta se maneja en el SSE service
      // No hacer res.send() aqu√≠, el SSE service se encarga

    } catch (error) {
      console.error('‚ùå Error estableciendo conexi√≥n SSE:', error);
      
      // Solo enviar error si la respuesta no se ha enviado a√∫n
      if (!res.headersSent) {
        return res.status(500).json({
          success: false,
          message: 'Error interno del servidor',
          error: error.message
        });
      }
    }
  }

  @Get('stats')
  @ApiOperation({ 
    summary: 'Obtener estad√≠sticas de conexiones SSE',
    description: 'Retorna informaci√≥n sobre conexiones activas y mensajes pendientes'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Estad√≠sticas de conexiones SSE' 
  })
  async getSSEStats() {
    try {
      const stats = this.sseService.getConnectionStats();
      
      return {
        success: true,
        data: {
          ...stats,
          timestamp: new Date(),
          description: 'Estad√≠sticas de conexiones SSE para WhatsApp'
        }
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas SSE:', error);
      return {
        success: false,
        message: 'Error obteniendo estad√≠sticas',
        error: error.message
      };
    }
  }

  @Get('health')
  @ApiOperation({ 
    summary: 'Verificar estado del servicio SSE',
    description: 'Endpoint de salud para verificar que el servicio SSE est√© funcionando'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Servicio SSE funcionando correctamente' 
  })
  async getSSEHealth() {
    try {
      const stats = this.sseService.getConnectionStats();
      
      return {
        success: true,
        status: 'healthy',
        timestamp: new Date(),
        service: 'WhatsApp SSE Service',
        connections: {
          active: stats.activeConnections,
          total: stats.totalConnections
        },
        messages: {
          pending: stats.pendingMessages
        }
      };
    } catch (error) {
      console.error('‚ùå Error en health check SSE:', error);
      return {
        success: false,
        status: 'unhealthy',
        timestamp: new Date(),
        service: 'WhatsApp SSE Service',
        error: error.message
      };
    }
  }
}
